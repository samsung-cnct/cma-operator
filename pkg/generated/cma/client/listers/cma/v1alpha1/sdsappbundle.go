/*
Copyright 2019 Samsung SDS Cloud Native Computing Team.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/samsung-cnct/cma-operator/pkg/apis/cma/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SDSAppBundleLister helps list SDSAppBundles.
type SDSAppBundleLister interface {
	// List lists all SDSAppBundles in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SDSAppBundle, err error)
	// SDSAppBundles returns an object that can list and get SDSAppBundles.
	SDSAppBundles(namespace string) SDSAppBundleNamespaceLister
	SDSAppBundleListerExpansion
}

// sDSAppBundleLister implements the SDSAppBundleLister interface.
type sDSAppBundleLister struct {
	indexer cache.Indexer
}

// NewSDSAppBundleLister returns a new SDSAppBundleLister.
func NewSDSAppBundleLister(indexer cache.Indexer) SDSAppBundleLister {
	return &sDSAppBundleLister{indexer: indexer}
}

// List lists all SDSAppBundles in the indexer.
func (s *sDSAppBundleLister) List(selector labels.Selector) (ret []*v1alpha1.SDSAppBundle, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SDSAppBundle))
	})
	return ret, err
}

// SDSAppBundles returns an object that can list and get SDSAppBundles.
func (s *sDSAppBundleLister) SDSAppBundles(namespace string) SDSAppBundleNamespaceLister {
	return sDSAppBundleNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SDSAppBundleNamespaceLister helps list and get SDSAppBundles.
type SDSAppBundleNamespaceLister interface {
	// List lists all SDSAppBundles in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SDSAppBundle, err error)
	// Get retrieves the SDSAppBundle from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SDSAppBundle, error)
	SDSAppBundleNamespaceListerExpansion
}

// sDSAppBundleNamespaceLister implements the SDSAppBundleNamespaceLister
// interface.
type sDSAppBundleNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SDSAppBundles in the indexer for a given namespace.
func (s sDSAppBundleNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SDSAppBundle, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SDSAppBundle))
	})
	return ret, err
}

// Get retrieves the SDSAppBundle from the indexer for a given namespace and name.
func (s sDSAppBundleNamespaceLister) Get(name string) (*v1alpha1.SDSAppBundle, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sdsappbundle"), name)
	}
	return obj.(*v1alpha1.SDSAppBundle), nil
}
