/*
Copyright 2019 Samsung SDS Cloud Native Computing Team.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/samsung-cnct/cma-operator/pkg/apis/cma/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SDSPackageManagerLister helps list SDSPackageManagers.
type SDSPackageManagerLister interface {
	// List lists all SDSPackageManagers in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SDSPackageManager, err error)
	// SDSPackageManagers returns an object that can list and get SDSPackageManagers.
	SDSPackageManagers(namespace string) SDSPackageManagerNamespaceLister
	SDSPackageManagerListerExpansion
}

// sDSPackageManagerLister implements the SDSPackageManagerLister interface.
type sDSPackageManagerLister struct {
	indexer cache.Indexer
}

// NewSDSPackageManagerLister returns a new SDSPackageManagerLister.
func NewSDSPackageManagerLister(indexer cache.Indexer) SDSPackageManagerLister {
	return &sDSPackageManagerLister{indexer: indexer}
}

// List lists all SDSPackageManagers in the indexer.
func (s *sDSPackageManagerLister) List(selector labels.Selector) (ret []*v1alpha1.SDSPackageManager, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SDSPackageManager))
	})
	return ret, err
}

// SDSPackageManagers returns an object that can list and get SDSPackageManagers.
func (s *sDSPackageManagerLister) SDSPackageManagers(namespace string) SDSPackageManagerNamespaceLister {
	return sDSPackageManagerNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SDSPackageManagerNamespaceLister helps list and get SDSPackageManagers.
type SDSPackageManagerNamespaceLister interface {
	// List lists all SDSPackageManagers in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SDSPackageManager, err error)
	// Get retrieves the SDSPackageManager from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SDSPackageManager, error)
	SDSPackageManagerNamespaceListerExpansion
}

// sDSPackageManagerNamespaceLister implements the SDSPackageManagerNamespaceLister
// interface.
type sDSPackageManagerNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SDSPackageManagers in the indexer for a given namespace.
func (s sDSPackageManagerNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SDSPackageManager, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SDSPackageManager))
	})
	return ret, err
}

// Get retrieves the SDSPackageManager from the indexer for a given namespace and name.
func (s sDSPackageManagerNamespaceLister) Get(name string) (*v1alpha1.SDSPackageManager, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sdspackagemanager"), name)
	}
	return obj.(*v1alpha1.SDSPackageManager), nil
}
