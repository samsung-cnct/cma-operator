/*
Copyright 2019 Samsung SDS Cloud Native Computing Team.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/samsung-cnct/cma-operator/pkg/apis/cma/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SDSClusterLister helps list SDSClusters.
type SDSClusterLister interface {
	// List lists all SDSClusters in the indexer.
	List(selector labels.Selector) (ret []*v1alpha1.SDSCluster, err error)
	// SDSClusters returns an object that can list and get SDSClusters.
	SDSClusters(namespace string) SDSClusterNamespaceLister
	SDSClusterListerExpansion
}

// sDSClusterLister implements the SDSClusterLister interface.
type sDSClusterLister struct {
	indexer cache.Indexer
}

// NewSDSClusterLister returns a new SDSClusterLister.
func NewSDSClusterLister(indexer cache.Indexer) SDSClusterLister {
	return &sDSClusterLister{indexer: indexer}
}

// List lists all SDSClusters in the indexer.
func (s *sDSClusterLister) List(selector labels.Selector) (ret []*v1alpha1.SDSCluster, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SDSCluster))
	})
	return ret, err
}

// SDSClusters returns an object that can list and get SDSClusters.
func (s *sDSClusterLister) SDSClusters(namespace string) SDSClusterNamespaceLister {
	return sDSClusterNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SDSClusterNamespaceLister helps list and get SDSClusters.
type SDSClusterNamespaceLister interface {
	// List lists all SDSClusters in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1alpha1.SDSCluster, err error)
	// Get retrieves the SDSCluster from the indexer for a given namespace and name.
	Get(name string) (*v1alpha1.SDSCluster, error)
	SDSClusterNamespaceListerExpansion
}

// sDSClusterNamespaceLister implements the SDSClusterNamespaceLister
// interface.
type sDSClusterNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SDSClusters in the indexer for a given namespace.
func (s sDSClusterNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SDSCluster, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SDSCluster))
	})
	return ret, err
}

// Get retrieves the SDSCluster from the indexer for a given namespace and name.
func (s sDSClusterNamespaceLister) Get(name string) (*v1alpha1.SDSCluster, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("sdscluster"), name)
	}
	return obj.(*v1alpha1.SDSCluster), nil
}
